embed {{ tex-preamble }}

metavar cur  {{ tex \alpha }} , curb {{ tex \beta }} , curc {{ tex \gamma }} ::= {{ com cursor symbols }}
metavar data {{ tex d }} ::= {{ com data/content symbols }}

grammar
formula :: 'formula_' ::=
 | judgement :: :: judgement
 | cur fresh :: :: cur_fresh {{ tex [[cur]]~\textsf{fresh} }}

grammar
symb {{ tex s }} :: 'symb_' ::= {{ com atomic symbol, a single unit of information }}
 | cur :: :: cur {{ com cursor }}
 | data :: :: data {{ com data/content }}

syms {{ tex S }} :: 'syms_' ::= {{ com symbol string }}
 | nil             :: :: nil  {{ tex \epsilon }}
 | cons symb syms :: :: cons {{ tex [[symb]] :: [[syms]] }}
 | snoc symb syms :: :: snoc {{ tex [[syms]] :: [[symb]] }}

symz {{ tex Z }} :: 'symz_' ::= {{ com symbol zipper }}
 | ( syms1 , cur , syms2 ) :: :: zipper {{ tex \left<[[syms1]]~|\!|~[[cur]]~|\!|~[[syms2]]\right> }}

grammar
dir :: 'dir_' ::= {{ com zipper direction }}
 | L :: :: Left {{ tex \textsf{L} }}
 | R :: :: Right {{ tex \textsf{R} }}

cmd {{ tex c }} :: 'cmd_' ::= {{ tex commands }}
 | insert data dir :: :: insert   {{ tex \textsf{ins}~[[data]]~[[dir]] }} {{ com insert [[data]] to direction [[dir]] }}
 | replace data dir :: :: replace {{ tex \textsf{repl}~[[data]]~[[dir]] }} {{ com replace next data symbol in direction [[dir]] with [[data]] }}
 | remove dir :: :: remove        {{ tex \textsf{rem}~[[dir]] }} {{ com remove next data symbol in direction [[dir]] }}
 | jumpto cur :: :: jumpto        {{ com Jump current cursor to position of cursor [[cur]] }} {{ tex \textsf{jmp}~[[cur]] }}
 | switchto cur :: :: switchto    {{ com Switch current cursor to cursor [[cur]] }} {{ tex \textsf{switch}~[[cur]] }}
 | mkcursor cur :: :: mkcursor    {{ tex \textsf{mk}~[[cur]] }}

grammar
action {{ tex a }} :: 'action_' ::= {{ com Actions }}
 | cmd :: :: cmd   {{ com Command }}
 | undo :: :: undo {{ com Undo }}
 | redo :: :: redo {{ com Redo }}

cmds {{ tex C }} :: 'cmds_' ::= {{ com Command sequence }}
 | nil           :: :: nil {{ tex \epsilon }}
 | cons cmd cmds :: :: cons {{ tex [[cmd]] :: [[cmds]] }}
 | snoc cmd cmds :: :: snoc {{ tex [[cmds]] :: [[cmd]] }}

cmdz {{ tex Z_\textsf{C} }} :: 'cmdz_' ::= {{ com Command zipper }}
 | ( cmds1 , cmds2 ) :: :: zipper

actions {{ tex A }} :: 'actions_' ::= {{ com Action sequence }}
 | nil :: :: nil {{ tex \epsilon }}
 | cons actions action :: :: cons {{ tex [[actions]] :: [[action]] }}

defns
J :: '' ::=

defn
actions !! cmdz
:: :: actions2Cmdz :: 'A2C_'
{{ tex [[actions]] \Downarrow [[cmdz]] }}
{{ com Performing actions [[actions]] yields command zipper [[cmdz]] }}
by

-------------------------------------- :: nil
nil !! (nil, nil)

actions !! (cons cmd cmds1, cmds2)
---------------------------------------------- :: undo
cons actions undo !! (cmds1, cons cmd cmds2)

actions !! (cmds1, cons cmd cmds2)
---------------------------------------------- :: redo
cons actions redo  !! (cons cmd cmds1, cmds2)

actions !! (cmds1, cmds2)
---------------------------------------------- :: cmd
cons actions cmd !! (cons cmd cmds1, nil)


defn
symz1 <-> symz2
:: :: move :: ''
{{ tex [[symz1]] \leftrightarrow [[symz2]] }}
{{ com Zipper [[symz1]] refocuses to [[symz2]] in zero or more steps. }}
by

------------------ :: Mv_stop
symz <-> symz

(          syms1, cur, cons symb syms2) <-> symz
------------------------------------------------------ :: Mv_left
(snoc symb syms1, cur,           syms2) <-> symz

(snoc symb syms1, cur,           syms2) <-> symz
----------------------------------------------------- :: Mv_right
(          syms1, cur, cons symb syms2) <-> symz


defn
cmd ; symz1 --> symz2
:: :: eval :: 'S_'
{{ tex [[cmd]] ; [[symz1]] \longrightarrow  [[symz2]] }}
{{ com Performing command [[cmd]] on zipper [[symz1]] yields zipper [[symz2]] }}
by

------------------------------------------------------------------------------- :: insertL1
insert data L ; (syms1, cur, syms2) --> (snoc data syms1, cur, syms2)

insert data L ; (syms1,           cur, syms2) --> (syms1',          cur, syms2')
------------------------------------------------------------------------------------- :: insertL2
insert data L ; (snoc curb syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

------------------------------------------------------------------------------------ :: removeL1
remove L ; (snoc data syms1, cur, syms2) --> (syms1, cur, syms2)

remove L ; (syms1,          cur, syms2) --> (syms1',          cur, syms2')
--------------------------------------------------------------------------------------- :: removeL2
remove L ; (snoc curb syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

remove       L ; symz1 --> symz2
insert  data L ; symz2 --> symz3
------------------------------------- :: replace
replace data L ; symz1 --> symz3

insert data L ; (syms2, cur, syms1) --> symz
---------------------------------------------------- :: insertR
insert data R ; (syms1, cur, syms2) --> symz

remove L ; (syms2, cur, syms1) --> symz
---------------------------------------------------- :: removeR
remove R ; (syms1, cur, syms2) --> symz

replace data L ; (syms2, cur, syms1) --> symz
---------------------------------------------------- :: replaceR
replace data R ; (syms1, cur, syms2) --> symz

curc fresh
(snoc cur syms1, curc, syms2) <-> (snoc curb syms1', curc, syms2')
---------------------------------------------------------------------- :: switchto
switchto curb ; (syms1, cur, syms2) --> (syms1', curb, syms2')

(syms1, cur, syms2) <-> (snoc curb syms1', cur, syms2')
-------------------------------------------------------------------------- :: jumpto
jumpto curb ; (syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

defn
cmds ; symz1 !! symz2
:: :: cmdz2symz :: 'C2C_'
{{ tex [[cmds]] ; [[symz1]] \Downarrow [[symz2]] }}
{{ com Performing commands [[cmds]] on zipper [[symz1]] yields zipper [[symz2]] }}
by


-------------------------------------- :: nil
nil ; symz !! symz

cmd ; symz1 --> symz2
cmds ; symz2 !! symz3
-------------------------------------------- :: cons
cons cmd cmds2 ; symz1 !! symz3
