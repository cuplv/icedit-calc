embed {{ tex-preamble }}

metavar cur  {{ tex \alpha }} , curb {{ tex \beta }} , curc {{ tex \gamma }} ::= {{ com cursor symbols }}
metavar data {{ tex d }} ::= {{ com data/content symbols }}

grammar
formula :: 'formula_' ::=
 | judgement :: :: judgement
 | cur fresh :: :: cur_fresh {{ tex [[cur]]~\textsf{fresh} }}

grammar
symb {{ tex s }} :: 'symb_' ::= {{ com atomic symbol, a single unit of information }}
 | cur :: :: cur {{ com cursor }}
 | data :: :: data {{ com data/content }}

syms {{ tex S }} :: 'syms_' ::= {{ com Symbol sequence }}
 | nil             :: :: nil  {{ tex \epsilon }}
 | cons symb syms :: :: cons {{ tex [[symb]] :: [[syms]] }}
 | snoc symb syms :: :: snoc {{ tex [[syms]] :: [[symb]] }}

symz {{ tex Z }} :: 'symz_' ::= {{ com Symbol zipper }}
 | ( syms1 , cur , syms2 ) :: :: zipper {{ tex \left<[[syms1]]~|\!|~[[cur]]~|\!|~[[syms2]]\right> }} {{ com Consists of symbols to left ([[syms1]]) and right ([[syms2]]) of active cursor [[cur]] }}
 | ( rev symz ) :: M :: rev {{ tex \textsf{rev}([[symz]]) }} {{ com The symbol zipper [[symz]] in reverse order (flipped left and right) }}

grammar
dir :: 'dir_' ::= {{ com Zipper direction }}
 | L :: :: Left {{ tex \textsf{L} }}
 | R :: :: Right {{ tex \textsf{R} }}

cmd {{ tex c }} :: 'cmd_' ::= {{ com Command }}
 | insert data dir :: :: insert   {{ tex \textsf{ins}~[[data]]~[[dir]] }} {{ com Insert [[data]] to direction [[dir]] }}
 | remove dir :: :: remove        {{ tex \textsf{rem}~[[dir]] }} {{ com Remove next data symbol in direction [[dir]] }}
 | move dir :: :: move            {{ com Move the cursor over the data symbol to direction [[dir]] }} {{ tex \textsf{move}~[[dir]] }}
 | replace data dir :: :: replace {{ tex \textsf{repl}~[[data]]~[[dir]] }} {{ com Replace next data symbol in direction [[dir]] with [[data]] }}
 | mk cur :: :: mkcursor          {{ com Make a passive cursor~[[cur]] at the position of the active cursor. }}  {{ tex \textsf{mk}~[[cur]] }}
 | switchto cur :: :: switchto    {{ com Switch active cursor to cursor [[cur]] }} {{ tex \textsf{switch}~[[cur]] }}
 | jumpto cur :: :: jumpto        {{ com Jump active cursor to position of cursor [[cur]] }} {{ tex \textsf{jmp}~[[cur]] }}
 | join cur :: :: join            {{ com Join active cursor to the identity and position of cursor~[[cur]]. }} {{ tex \textsf{join}~[[cur]] }}

cmds {{ tex C }} :: 'cmds_' ::= {{ com Command sequence }}
 | nil           :: :: nil {{ tex \epsilon }}
 | cons cmd cmds :: :: cons {{ tex [[cmd]] :: [[cmds]] }}
 | snoc cmd cmds :: :: snoc {{ tex [[cmds]] :: [[cmd]] }}
 | ( rev cmds )  :: M :: rev {{ tex \textsf{rev}([[cmds]]) }} {{ com Command sequence [[cmds]], in reverse order. }}

cmdz {{ tex Z_\textsf{C} }} :: 'cmdz_' ::= {{ com Command zipper }}
 | ( cmds1 , cmds2 ) :: :: zipper {{ tex \left< [[cmds1]]~|\!|~[[cmds2]] \right> }} {{ com Consists of command history [[cmds1]] and undo buffer [[cmds2]]. }}

grammar
action {{ tex a }} :: 'action_' ::= {{ com Action }}
 | cmd :: :: cmd   {{ com Perform command [[cmd]] }} {{ tex \textsf{cmd}~[[cmd]] }}
 | undo :: :: undo {{ com Undo previous command action. }} {{ tex \textsf{undo} }}
 | redo :: :: redo {{ com Undo previous undo action, redoing undone command action.  }} {{ tex \textsf{redo} }}

actions {{ tex A }} :: 'actions_' ::= {{ com Action sequence }}
 | nil :: :: nil {{ tex \epsilon }}
 | cons actions action :: :: cons {{ tex [[actions]] :: [[action]] }}

defns
J :: '' ::=

defn
symz1 <-> symz2
:: :: move :: ''
{{ tex [[symz1]] \leftrightarrow [[symz2]] }}
{{ com Zipper [[symz1]] refocuses to [[symz2]] in zero or more steps. }}
by

------------------ :: Mv_stop
symz <-> symz

(          syms1, cur, cons symb syms2) <-> symz
------------------------------------------------------ :: Mv_left
(snoc symb syms1, cur,           syms2) <-> symz

(snoc symb syms1, cur,           syms2) <-> symz
----------------------------------------------------- :: Mv_right
(          syms1, cur, cons symb syms2) <-> symz


defn
cmd ; symz1 --> symz2
:: :: eval :: 'Ec_'
{{ tex [[symz1]] \vdash [[cmd]]  \longrightarrow  [[symz2]] }}
{{ com Under zipper [[symz1]], performing command [[cmd]] yields zipper [[symz2]] }}
by

------------------------------------------------------------------------------- :: insertL1
insert data L ; (syms1, cur, syms2) --> (snoc data syms1, cur, syms2)

insert data L ; (syms1,           cur, syms2) --> (syms1',          cur, syms2')
------------------------------------------------------------------------------------- :: insertL2
insert data L ; (snoc curb syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

------------------------------------------------------------------------------------ :: removeL1
remove L ; (snoc data syms1, cur, syms2) --> (syms1, cur, syms2)

remove L ; (syms1,          cur, syms2) --> (syms1',          cur, syms2')
--------------------------------------------------------------------------------------- :: removeL2
remove L ; (snoc curb syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

----------------------------------------------------------------------------------- :: moveL1
move L ; (snoc data syms1, cur, syms2) --> (syms1, cur, cons data syms2)

move L ; (syms1, cur, syms2) --> (syms1', cur, syms2')
---------------------------------------------------------------------------- :: moveL2
move L ; (snoc curb syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

remove       L ; symz1 --> symz2
insert  data L ; symz2 --> symz3
------------------------------------- :: replaceL
replace data L ; symz1 --> symz3

insert data L ; (rev symz) --> (rev symz')
---------------------------------------------------- :: insertR
insert data R ; symz --> symz

remove L ; (rev symz) --> (rev symz')
---------------------------------------------------- :: removeR
remove R ; symz --> symz

move L ; (rev symz) --> (rev symz')
------------------------------------------------------ :: moveR
move R ; symz --> symz'

replace data L ; (rev symz) --> (rev symz')
---------------------------------------------------- :: replaceR
replace data R ; symz --> symz'

curc fresh
(snoc cur syms1, curc, syms2) <-> (snoc curb syms1', curc, syms2')
---------------------------------------------------------------------- :: switchto
switchto curb ; (syms1, cur, syms2) --> (syms1', curb, syms2')

(syms1, cur, syms2) <-> (snoc curb syms1', cur, syms2')
-------------------------------------------------------------------------- :: jumpto
jumpto curb ; (syms1, cur, syms2) --> (snoc curb syms1', cur, syms2')

(syms1, cur, syms2) <-> (snoc curb syms1', cur, syms2')
---------------------------------------------------------------------- :: join
join curb ; (syms1, cur, syms2) --> (syms1', curb, syms2')

------------------------------------------------------------------- :: mk
mk curb ; (syms1, cur, syms2) --> (snoc curb syms1, cur, syms2)

defn
cmds ; symz1 !! symz2
:: :: cmdz2symz :: 'EC_'
{{ tex [[symz1]] \vdash [[cmds]] \Downarrow [[symz2]] }}
{{ com Under zipper [[symz1]], performing command sequence [[cmds]] yields zipper [[symz2]] }}
by

-------------------------------------- :: nil
nil ; symz !! symz

cmd ; symz1 --> symz2
cmds ; symz2 !! symz3
-------------------------------------------- :: cons
cons cmd cmds ; symz1 !! symz3


defn
actions !! cmdz
:: :: actions2Cmdz :: 'EAC_'
{{ tex [[actions]] \Downarrow [[cmdz]] }}
{{ com Performing action sequence [[actions]] yields command zipper [[cmdz]] }}
by

-------------------------------------- :: nil
nil !! (nil, nil)

actions !! (snoc cmd cmds1, cmds2)
---------------------------------------------- :: undo
cons actions undo !! (cmds1, cons cmd cmds2)

actions !! (cmds1, cons cmd cmds2)
---------------------------------------------- :: redo
cons actions redo  !! (snoc cmd cmds1, cmds2)

actions !! (cmds1, cmds2)
---------------------------------------------- :: cmd
cons actions cmd !! (snoc cmd cmds1, nil)


defn
actions !! symz
:: :: actions2Symz :: ''
{{ tex [[actions]] \Downarrow [[symz]] }}
{{ com Performing action sequence [[actions]] yields symbol zipper [[symz]] }}
by

cur fresh
actions !! (cmds1, cmds2)
(rev cmds1) ; (nil, cur, nil) !! symz
-------------------------------------- :: ZofA
actions !! symz
