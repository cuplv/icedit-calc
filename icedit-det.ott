
grammar
curs {{ tex \bar{\alpha} }} :: 'curs_' ::= {{ com Sequence of cursors }}
 | cur curs :: :: curs
 | nil :: :: nil {{ tex \epsilon }}

symtree {{ tex T }} :: 'T_' ::= {{ com Unfocused symbol tree. }}
 | nil :: :: nil {{ tex \epsilon }} {{ com Empty tree }}
 | symb :: :: symb {{ com Symbol }}
 | ( bin curs1 symtree1 curs2 symtree2 ) :: :: bin {{ tex \left<\!\left[ [[curs1]]~[[symtree1]]~|\!|~[[curs2]]~[[symtree2]] \right]\!\right> }} {{ com Binary tree; [[curs1]] are cursors in [[symtree1]]; [[curs2]] are cursors in [[symtree2]]  }}

syms {{ tex S }} :: 'syms_' ::=
 | ( seq symtree ) :: :: seq {{ com Sequence of tree [[symtree]] }} {{ tex \textsf{seq}([[symtree]]) }}


defns
Jdet :: '' ::=


defn
focus cur ; symtree !! symz
:: :: find :: 'find_'
{{ tex [[symtree]] \Downarrow^{\textsf{focus} }_{[[cur]]} [[symz]] }}
by

------------------------------------ :: cur
focus cur ; cur !! (nil, cur, nil)

------------------------------------ :: cur
focus cur ; cur !! (nil, cur, nil)

defn
next dir ; symtree1 ; symtree2 !! syms
:: :: next :: 'next_'
{{ tex [[symtree1]] ; [[symtree2]] \Downarrow^{\textsf{next} }_{[[dir]]} [[syms]] }}
{{ com From the [[dir]]-most position; the symbol sequence [[symtree1]] followed by [[symtree2]] is [[syms]]. }}
by

------------------------------------------ :: nil1
next dir ; nil ; nil !! nil

next dir ; symtree ; nil !! syms
------------------------------------------ :: nil2
next dir ; nil ; symtree !! syms

--------------------------------------------------------- :: sym
next dir ; symb ; symtree !! cons symb (seq symtree)

next L ; symtree1 ; (bin nil symtree2 nil symtree3) !! syms
------------------------------------------------------------------- :: binL
next L ; (bin curs1 symtree1 curs2 symtree2) ; symtree3 !! syms

next R ; symtree2 ; (bin nil symtree3 nil symtree1 ) !! syms
------------------------------------------------------------------- :: binR
next R ; (bin curs1 symtree1 curs2 symtree2) ; symtree3 !! syms


